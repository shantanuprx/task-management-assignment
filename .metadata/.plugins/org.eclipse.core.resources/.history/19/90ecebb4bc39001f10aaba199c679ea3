package com.taskmanagement.userservice.util;

import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.taskmanagement.userservice.dto.AuthRequestDto;
import com.taskmanagement.userservice.dto.KeyCloakTokenGenerationDto;
import com.taskmanagement.userservice.entity.UserEntity;

@Component
public class KeyCloakUtil {

	@Autowired
	private RestTemplate restTemplate;

	@Autowired
	private KeyCloakTokenGenerationDto keyCloakTokenGenerationDto;

	public void addUserToRealm(UserEntity userEntity) throws IllegalAccessException, JSONException {
//		String token = generateToken();
		
	}

	private String generateToken() throws IllegalAccessException, JSONException {
		StringBuilder payload = new StringBuilder();
		payload.append("client_id=").append(keyCloakTokenGenerationDto.getClientId()).append("&")
				.append("client_secret=").append(keyCloakTokenGenerationDto.getClientSecret()).append("&")
				.append("grant_type=").append(keyCloakTokenGenerationDto.getGrantType());
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
		HttpEntity<String> request = new HttpEntity<String>(payload.toString(), headers);
		String response = restTemplate.postForObject(keyCloakTokenGenerationDto.getUrl(), request, String.class);
		JSONObject responseJSON = new JSONObject(response);
		if(responseJSON.has("error")) {
			throw new IllegalAccessException(responseJSON.getString("error") +
					" - "  + responseJSON.getString("error_description"));
		} else {
			return responseJSON.optString("access_token");
		}
	}

	public JSONObject verifyUserFromKeyCloak(AuthRequestDto authRequestDto) {
		StringBuilder payload = new StringBuilder();
		payload.append("client_id=").append(keyCloakTokenGenerationDto.getClientId()).append("&")
				.append("client_secret=").append(keyCloakTokenGenerationDto.getClientSecret()).append("&")
				.append("grant_type=").append(keyCloakTokenGenerationDto.getGrantType());
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
		HttpEntity<String> request = new HttpEntity<String>(payload.toString(), headers);
		String response = restTemplate.postForObject(keyCloakTokenGenerationDto.getUrl(), request, String.class);
		JSONObject responseJSON = new JSONObject(response);
		if(responseJSON.has("error")) {
			throw new IllegalAccessException(responseJSON.getString("error") +
					" - "  + responseJSON.getString("error_description"));
		} else {
			return responseJSON.optString("access_token");
		}
	}

}
