package com.taskmanagement.taskcreationservice.service.impl;

import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.taskmanagement.taskcreationservice.adapter.TaskAdapter;
import com.taskmanagement.taskcreationservice.dto.ErrorDto;
import com.taskmanagement.taskcreationservice.dto.ResponseDto;
import com.taskmanagement.taskcreationservice.dto.TaskDto;
import com.taskmanagement.taskcreationservice.entity.TaskEntity;
import com.taskmanagement.taskcreationservice.repository.TaskRepository;
import com.taskmanagement.taskcreationservice.service.TaskService;
import com.taskmanagement.taskcreationservice.service.util.VerificationUtil;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@SuppressWarnings("unchecked")
public class TaskServiceImpl<T> extends TaskService<T> {

	@Autowired
	private TaskRepository repository;

	@Autowired
	private TaskAdapter taskAdapter;

	@Autowired
	private VerificationUtil verificationUtil;

	@Override
	public ResponseEntity<T> createTask(Map<String, Object> requestMap) throws Exception {
		log.debug("Entering create Task method at {}", System.currentTimeMillis());
		try {
			TaskDto taskDto = new ObjectMapper().convertValue(requestMap, TaskDto.class);
			TaskEntity taskEntity = taskAdapter.convertModelToEntity(taskDto);
			if (verificationUtil.verifyUserDetails(taskEntity.getAssignedUserId())) {
				repository.save(taskEntity);
				return ResponseEntity.status(HttpStatus.OK)
						.body((T) new ResponseDto(null, HttpStatus.OK, "Task created successfully"));
			} else {
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body((T) new ErrorDto(HttpStatus.BAD_REQUEST,
						"Assigned user doesn't exist", "Assigned user doesn't exist", System.currentTimeMillis()));
			}
		} catch (Exception ex) {
			log.error("Exception occurred in create Task method with exception ", ex);
			throw ex;
		} finally {
			log.debug("Exiting create Task method at {}", System.currentTimeMillis());
		}
	}

	@Override
	public ResponseEntity<T> getTaskDetails(Integer taskId) throws Exception {
		log.debug("Entering get Task Details with taskId method at {}", System.currentTimeMillis());
		try {
			Optional<TaskEntity> taskEntity = repository.findByTaskId(taskId);
			if (taskEntity.isPresent()) {
				TaskDto taskDto = taskAdapter.convertModelToEntity(taskEntity.get());
				return ResponseEntity.status(HttpStatus.OK).body((T) taskDto);
			} else {
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body((T) new ErrorDto(HttpStatus.BAD_REQUEST,
						"Task Id doesn't exist", "Task Id doesn't exist", System.currentTimeMillis()));
			}
		} catch (Exception ex) {
			log.error("Exception occurred in get Task Details with taskId method with exception ", ex);
			throw ex;
		} finally {
			log.debug("Exiting get Task Details with taskId method at {}", System.currentTimeMillis());
		}
	}

	@Override
	public ResponseEntity<T> getTaskDetails(int pageNumber, int pageSize) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ResponseEntity<T> updateTask(Integer taskId, Map<String, Object> requestMap) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ResponseEntity<T> assignTaskToUser(Integer taskId, String userId) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ResponseEntity<T> markTaskComplete(Integer taskId) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

}
